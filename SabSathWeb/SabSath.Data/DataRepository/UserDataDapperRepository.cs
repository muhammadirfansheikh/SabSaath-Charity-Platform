using Dapper;
using SabSath.Core.Model;
using SabSath.Core.Models;
using SabSath.Core.Utilities;
using SabSath.Data.Manager;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SabSath.Data.DataRepository
{
    public interface IUserDataDapperRepository
    {
        Task<IEnumerable<dynamic>> GetUser(UserLogin user);
        Task<dynamic> CrudUser(UserLogin user);

        DataSet VerifyLogin(UserLogin user);

        DataSet usp_User_Change_Passowrd(UserLogin objUserLogin);
        DataSet GetRoleMenuesAndFeatures(int RoleId);
        Task<dynamic> ForgotPassword(UserLogin user);

        Task<dynamic> ForgotPasswordAutoGenerated(UserLogin user);

        //  Task<IEnumerable<dynamic>> RoleAgainst_Menues(UserRole obj);
        Task<IEnumerable<dynamic>> RoleAgainst_Menues(UserRole obj);

        
        Task<dynamic> LogOut(UserLogin user);

    }
    public class UserDataDapperRepository : IUserDataDapperRepository
    {
        private string connectionString = "";

        private readonly DapperManager dapperManager;

        dynamic objdynamic = null;
        public UserDataDapperRepository()
        {

            connectionString = GenericConstants.ConnectionString;
            dapperManager = new DapperManager(connectionString);
        }

        public IDbConnection _Connection
        {
            get
            {
                return new SqlConnection(connectionString);
            }
        }

        #region UserLogin
        public async Task<IEnumerable<dynamic>> GetUser(UserLogin user)
        {
            var queryParameters = new DynamicParameters();
            queryParameters.Add("@UserId", user.UserId);
            queryParameters.Add("@UserName", user.Name);
            queryParameters.Add("@RoleId", user.RoleId);
            queryParameters.Add("@EmailAddress", user.EmailAddress);

            var spName = "usp_UserLogin_Get";

            UserLogin userLogin = new UserLogin();
            return await dapperManager.QueryList<dynamic>(userLogin, spName, queryParameters);


        }
        public async Task<dynamic> CrudUser(UserLogin user)
        {

            var queryParameters = new DynamicParameters();
            queryParameters.Add("@OperationId", user.OperationTypeId);
            queryParameters.Add("@UserId", user.UserId);
            queryParameters.Add("@Name", user.Name);
            queryParameters.Add("@EmailAddress", user.EmailAddress);
            queryParameters.Add("@Password", user.OperationTypeId == Setup_MasterDetail.Insert ? GenericConstants.Password : user.Password);
            queryParameters.Add("@RoleId", user.RoleId);
            // queryParameters.Add("@IsActive", user.IsActive);
            queryParameters.Add("@CreatedBy", user.CreatedBy);
            queryParameters.Add("@UserIP", user.UserIP);



            var spName = "usp_UserLogin_Operation";

            return await dapperManager.QueryList<dynamic>(objdynamic, spName, queryParameters);
        }


        public DataSet VerifyLogin(UserLogin user)
        {
            List<SqlParameter> parm = new List<SqlParameter>()
            {
                new SqlParameter("@OperationId", SqlDbType.Int) {Value =user.OperationTypeId},
                new SqlParameter("@UserId", SqlDbType.Int) {Value =user.UserId},
                new SqlParameter("@Name", SqlDbType.NVarChar) {Value =user.Name},
                new SqlParameter("@EmailAddress", SqlDbType.NVarChar) {Value =user.EmailAddress},
                new SqlParameter("@Password", SqlDbType.NVarChar) {Value =user.Password},
                new SqlParameter("@RoleId", SqlDbType.Int) {Value =user.RoleId},
                new SqlParameter("@CreatedBy", SqlDbType.Int) {Value =user.CreatedBy},
                new SqlParameter("@UserIP", SqlDbType.NVarChar) {Value = user.UserIP},
                new SqlParameter("@EmailOrPhone", SqlDbType.NVarChar) {Value = user.EmailOrPhone},
                new SqlParameter("@CountryCode", SqlDbType.NVarChar) {Value = user.CountryCode}


        };


            var spName = "usp_UserLogin_Operation";
            return dapperManager.GetDataSet(spName, parm.ToArray());
        }

        public DataSet usp_User_Change_Passowrd(UserLogin objUserLogin)
        {

            List<SqlParameter> parm = new List<SqlParameter>();
            parm.Add(new SqlParameter() { ParameterName = "@UserId", SqlDbType = SqlDbType.Int, Value = objUserLogin.UserId });
            parm.Add(new SqlParameter() { ParameterName = "@OldPassword", SqlDbType = SqlDbType.NVarChar, Value = objUserLogin.OldPassword });
            parm.Add(new SqlParameter() { ParameterName = "@NewPassword", SqlDbType = SqlDbType.NVarChar, Value = objUserLogin.Password });


            var spName = "SP_ChangePassword";
            return dapperManager.GetDataSet(spName, parm.ToArray());
        }
        public DataSet GetRoleMenuesAndFeatures(int RoleId)
        {
            List<SqlParameter> parm = new List<SqlParameter>()
            {
                new SqlParameter("@RoleId", SqlDbType.Int) {Value =RoleId},

        };

            var spName = "Sp_SabSath_GetRoleAccessMenuesFeatures";
            return dapperManager.GetDataSet(spName, parm.ToArray());
        }



        public async Task<dynamic> ForgotPasswordAutoGenerated(UserLogin user)
        {
            var queryParameters = new DynamicParameters();

            queryParameters.Add("@username", user.Name);

            var spName = "ForgetPassword";

            return await dapperManager.QueryList<dynamic>(objdynamic, spName, queryParameters);
        }
        public async Task<dynamic> ForgotPassword(UserLogin user)
        {
            var queryParameters = new DynamicParameters();

            queryParameters.Add("@EmailAddress", user.EmailAddress);
            queryParameters.Add("@NewPassword", CommonObjects.CreateRandomPassword(10));
            queryParameters.Add("@UserIP", user.UserIP);

            var spName = "usp_UserLogin_UpdatePassword";

            return await dapperManager.QueryList<dynamic>(objdynamic, spName, queryParameters);
        }
        #endregion



        public string GenerateRandomNo()
        {
            return "8";
            // return _random.Next(0, 9999).ToString("D4");
        }
        public async Task<IEnumerable<dynamic>> RoleAgainst_Menues(UserRole obj)
        {
            List<Menu> nodes = new List<Menu>();
            Menu parent = new Menu();
            List<SubMenu> SubMenus = new List<SubMenu>();
            // List<SubMenu> SubMenus = new List<SubMenu>();
            Menu roleMenuItemFeatureMapping1 = new Menu();

            var queryParametersParent1 = new DynamicParameters();
            queryParametersParent1.Add("@RoleId", 3);

            var spNameParentNode1 = "usp_MenuItem_Get_RoleMenuItemParent";
            IEnumerable<Menu> modelParent1 = await dapperManager.QueryList(roleMenuItemFeatureMapping1, spNameParentNode1, queryParametersParent1);
            foreach (Menu type1 in modelParent1)
            {
                Menu ParrentMenu = null;
                // routes.Add(
                // sadd { (path = "/dashboard", name = "Dashboard", icon = "nc-icon nc-bank", component = "Dashboard", layout = "/admin")}
                ParrentMenu = new Menu()
                { path = type1.Menu_URL, name = type1.Menu_Name, icon = "nc-icon nc-bank", component = "Dashboard", layout = "/admin" };


                var queryParamParent = new DynamicParameters();
                queryParamParent.Add("@RoleId", 3);
                queryParamParent.Add("@MenuItemId", type1.MenuId);
                var spNameParent = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
                Menu ParentNode = new Menu();
                IEnumerable<Menu> modelParentChecked = await dapperManager.QueryList(ParentNode, spNameParent, queryParamParent);
                ParrentMenu.SubMenus = new List<SubMenu>();
                foreach (Menu SubMenuesl in modelParentChecked)
                {
                    SubMenu objs = new SubMenu();
                    objs.path = SubMenuesl.Menu_URL; //"/RolesAccess";
                    objs.name = "RolesAccess";
                    objs.icon = "nc-icon nc-bank";
                    objs.component = "RolesAccess";
                    objs.layout = "/admin";
                    objs.path = "/RolesAccess";
                    ParrentMenu.SubMenus.Add(objs);
                }
                // ); 
                nodes.Add(ParrentMenu);

            }
            return nodes;
            //routes.Add(ParentNode);






            //List<MenuFeatureMapping> nodes = new List<MenuFeatureMapping>();
            //  MenuFeatureMapping parent = new MenuFeatureMapping();



            //RoleMenuItemFeatureMapping roleMenuItemFeatureMapping = new RoleMenuItemFeatureMapping();
            //MenuItemFeature menuItemFeature = new MenuItemFeature();

            //var queryParametersParent = new DynamicParameters();
            //queryParametersParent.Add("@RoleId", 3);

            //var spNameParentNode = "usp_MenuItem_Get_RoleMenuItemParent ";
            //IEnumerable<RoleMenuItemFeatureMapping> modelParent = await dapperManager.QueryList(roleMenuItemFeatureMapping, spNameParentNode, queryParametersParent);

            //foreach (RoleMenuItemFeatureMapping type in modelParent)
            //{
            //    //Get Checked menu Item (Parent Node)


            //    if (type.SubNode == "#")
            //    {
            //        //Get Parent Name from Below Line and Check and UnCheck Node behalf on this
            //        var queryParamParent = new DynamicParameters();
            //        queryParamParent.Add("@RoleId", 3);
            //        queryParamParent.Add("@MenuItemId", type.MenuId);

            //        var spNameParent = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //        RoleMenuItemFeatureMapping ParentNode = new RoleMenuItemFeatureMapping();
            //        IEnumerable<RoleMenuItemFeatureMapping> modelParentChecked = await dapperManager.QueryList(ParentNode, spNameParent, queryParamParent);
            //        if (modelParentChecked.Any())
            //        {
            //            parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, Value = type.MenuId.ToString(), ApplicationId = type.ApplicationId, parent = "#", Label = type.Menu_Name, Checked = true };
            //        }
            //        else
            //        {
            //            parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, Value = type.MenuId.ToString(), ApplicationId = type.ApplicationId, parent = "#", Label = type.Menu_Name, Checked = false };
            //        }

            //        //Get Child Node Name from Below Line
            //        var queryParametersSubModule = new DynamicParameters();
            //        queryParametersSubModule.Add("@ParentId", type.MenuId);

            //        var spNameSubChildModule = "usp_MenuItem_Get_RoleMenuItemChildModule ";

            //        IEnumerable<MenuFeatureMapping> modelSubModule = await dapperManager.QueryList(parent, spNameSubChildModule, queryParametersSubModule);
            //        var i = 0;
            //        foreach (MenuFeatureMapping SubModule in modelSubModule)
            //        {
            //            if (SubModule.MenuId == 4)
            //            {

            //            }
            //            string randomSubModule = GenerateRandomNo();

            //            var queryParameters = new DynamicParameters();
            //            queryParameters.Add("@RoleId", 3);
            //            queryParameters.Add("@MenuItemId", SubModule.MenuId);

            //            var spName = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //            RoleMenuItemFeatureMapping role = new RoleMenuItemFeatureMapping();
            //            IEnumerable<RoleMenuItemFeatureMapping> modelSubModuleChecked = await dapperManager.QueryList(role, spName, queryParameters);
            //            if (modelSubModuleChecked.Any())
            //            {
            //                parent.children.Add(new MenuFeatureMapping() { MenuItemId = SubModule.MenuId, Value = SubModule.MenuId + randomSubModule, ParentId = type.Parent_Id, Label = SubModule.Menu_Name, Checked = true });

            //                //Get Grand Child Node Name from Below Line
            //                var queryParametersSubChild = new DynamicParameters();
            //                queryParametersSubChild.Add("@MenuItemId", SubModule.MenuId);

            //                var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //                IEnumerable<MenuFeatureMapping> modelFeature = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //                foreach (MenuFeatureMapping SubModulefeature in modelFeature)
            //                {
            //                    //Query if Record Exist in RoleMenuItemFeatureMapping Table then Mark Checked Else Checked = false
            //                    string tableNameFeature = "Setup_RoleMenuItemFeatureMapping";
            //                    string qryFeature = $"RoleId = @RoleId  AND  MenuItemFeatureId = @MenuItemFeatureId and IsActive = 1";
            //                    object paramFeature = new { RoleId = 3, MenuItemId = SubModule.MenuId, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId };
            //                    //object paramSubModule = new { RoleId = roleId, MenuItemId = type.MenuId };
            //                    RoleMenuItemFeatureMapping modelFeatureChecked = dapperManager.FindByID<RoleMenuItemFeatureMapping>(qryFeature, paramFeature, tableNameFeature).FirstOrDefault();
            //                    if (modelFeatureChecked != null)
            //                    {
            //                       parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = true });
            //                    }
            //                    else
            //                    {
            //                        parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = false });
            //                    }

            //                }
            //                nodes.Add(parent);

            //            }
            //            else
            //            {
            //                parent.children.Add(new MenuFeatureMapping() { MenuItemId = SubModule.MenuId, ParentId = type.Parent_Id, Value = SubModule.MenuId + randomSubModule, Label = SubModule.Menu_Name, Checked = false });

            //                //Get Grand Child Node Name from Below Line
            //                var queryParametersSubChild = new DynamicParameters();
            //                queryParametersSubChild.Add("@MenuItemId", SubModule.MenuId);

            //                var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //                IEnumerable<MenuFeatureMapping> modelFeature = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //                foreach (MenuFeatureMapping SubModulefeature in modelFeature)
            //                {
            //                    parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = false });
            //                    // parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.FeatureId, MenuItemId = type.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, Checked = true });
            //                }

            //                nodes.Add(parent);
            //            }
            //            i++;
            //        }

            //    }
            //    else
            //    {
            //        if (type.SubNode != "###" && type.SubNode != "#")
            //        {
            //            if (type.MenuId == 2)
            //            {

            //            }
            //            var queryParameters = new DynamicParameters();
            //            queryParameters.Add("@RoleId", 3);
            //            queryParameters.Add("@MenuItemId", type.MenuId);

            //            var spName = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //            RoleMenuItemFeatureMapping role = new RoleMenuItemFeatureMapping();
            //            IEnumerable<RoleMenuItemFeatureMapping> modelParentNodeChecked = await dapperManager.QueryList(role, spName, queryParameters);
            //            if (modelParentNodeChecked.Any())
            //            {
            //                parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, ApplicationId = type.ApplicationId, Value = type.MenuId.ToString(), parent = "#", Label = type.Menu_Name, Checked = true };
            //                nodes.Add(parent);
            //            }
            //            else
            //            {
            //                parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, ApplicationId = type.ApplicationId, Value = type.MenuId.ToString(), parent = "#", Label = type.Menu_Name, Checked = false };
            //                nodes.Add(parent);

            //            }


            //        }

            //    }
            //    // }
            //    if (type.SubNode != "#" && type.SubNode != "###")

            //    {
            //        //Get Child Node Feature Mapping
            //        var queryParametersSubChild = new DynamicParameters();
            //        queryParametersSubChild.Add("@MenuItemId", type.MenuId);

            //        var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //        IEnumerable<MenuFeatureMapping> modelSubChild = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //        string randomChild = GenerateRandomNo();
            //        foreach (MenuFeatureMapping Subfeature in modelSubChild)
            //        {
            //            string tableNameFeature = "Setup_RoleMenuItemFeatureMapping";
            //            string qryFeature = $"RoleId = @RoleId  AND MenuItemFeatureId = @MenuItemFeatureId and IsActive = 1 ";
            //            object paramFeature = new { RoleId = 3, MenuItemId = type.MenuId, MenuItemFeatureId = Subfeature.MenuItemFeatureId };
            //            RoleMenuItemFeatureMapping modelFeature = dapperManager.FindByID<RoleMenuItemFeatureMapping>(qryFeature, paramFeature, tableNameFeature).FirstOrDefault();

            //            if (modelFeature != null)
            //            {
            //                parent.children.Add(new MenuFeatureMapping() { FeatureId = Subfeature.MenuItemFeatureId, MenuItemId = type.MenuId, Value = Subfeature.FeatureId + randomChild, Label = Subfeature.Feature, MenuItemFeatureId = Subfeature.MenuItemFeatureId, Checked = true });
            //            }
            //            else
            //            {
            //                parent.children.Add(new MenuFeatureMapping() { FeatureId = Subfeature.MenuItemFeatureId, MenuItemId = type.MenuId, Value = Subfeature.FeatureId + randomChild, Label = Subfeature.Feature, MenuItemFeatureId = Subfeature.MenuItemFeatureId, Checked = false });
            //            }

            //        }
            //    }
            //}
            //return nodes.Distinct().ToList();








            //routes.Add(
            //    new Menu()
            //    {
            //        path = "/dashboard",
            //        name = "Dashboard",
            //        icon = "nc-icon nc-bank",
            //        component = "Dashboard",
            //        layout = "/admin",
            //        SubMenus = new List<SubMenu>()
            //        {

            //        }
            //    }
            //    );

            //routes.Add(


            //            List<SubMenu> nodes = new List<SubMenu>();
            //            SubMenu parent = new SubMenu();

            //            //RoleMenuItemFeatureMapping roleMenuItemFeatureMapping = new RoleMenuItemFeatureMapping();
            //            //MenuItemFeature menuItemFeature = new MenuItemFeature();

            //            Menu roleMenuItemFeatureMapping = new Menu();
            //            MenuItemFeature menuItemFeature = new MenuItemFeature();

            //            var queryParametersParent = new DynamicParameters();
            //            queryParametersParent.Add("@RoleId", obj.RoleId);

            //            var spNameParentNode = "usp_MenuItem_Get_RoleMenuItemParent ";
            //            IEnumerable<Menu> modelParent = await dapperManager.QueryList(roleMenuItemFeatureMapping, spNameParentNode, queryParametersParent);

            //            foreach (Menu type in modelParent)
            //            {
            //                //Get Checked menu Item (Parent Node)
            //                if (type.SubNode == "#")
            //                {
            //                    //Get Parent Name from Below Line and Check and UnCheck Node behalf on this
            //                    var queryParamParent = new DynamicParameters();
            //                    queryParamParent.Add("@RoleId", obj.RoleId);
            //                    queryParamParent.Add("@MenuItemId", type.MenuId);

            //                    var spNameParent = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //                    //RoleMenuItemFeatureMapping ParentNode = new RoleMenuItemFeatureMapping();
            //                     Menu ParentNode = new Menu();

            //                    IEnumerable<Menu> modelParentChecked = await dapperManager.QueryList(ParentNode, spNameParent, queryParamParent);
            //                    if (modelParentChecked.Any())
            //                    {
            //                        parent = new SubMenu() { MenuItemId = type.MenuId, Value = type.MenuId.ToString(), ApplicationId = type.ApplicationId, parent = "#", Label = type.Menu_Name, Checked = true };
            //                    }
            //                    else
            //                    {
            //                        parent = new SubMenu() { MenuItemId = type.MenuId, Value = type.MenuId.ToString(), ApplicationId = type.ApplicationId, parent = "#", Label = type.Menu_Name, Checked = false };
            //                    }

            //                    //Get Child Node Name from Below Line
            //                    var queryParametersSubModule = new DynamicParameters();
            //                    queryParametersSubModule.Add("@ParentId", type.MenuId);

            //                    var spNameSubChildModule = "usp_MenuItem_Get_RoleMenuItemChildModule ";

            //                    IEnumerable<SubMenu> modelSubModule = await dapperManager.QueryList(parent, spNameSubChildModule, queryParametersSubModule);
            //                    var i = 0;
            //                    foreach (SubMenu SubModule in modelSubModule)
            //                    {
            //                        string randomSubModule = GenerateRandomNo();

            //                        var queryParameters = new DynamicParameters();
            //                        queryParameters.Add("@RoleId", obj.RoleId);
            //                        queryParameters.Add("@MenuItemId", SubModule.MenuItemId);

            //                        var spName = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //                        Menu role = new Menu();
            //                        IEnumerable<Menu> modelSubModuleChecked = await dapperManager.QueryList(role, spName, queryParameters);
            //                       // if (modelSubModuleChecked.Any())
            //                       // {
            //                            //parent.children.Add(new SubMenu() { MenuItemId = SubModule.MenuId, Value = SubModule.MenuId + randomSubModule, ParentId = type.Parent_Id, Label = SubModule.Menu_Name, Checked = true });

            //                            ////Get Grand Child Node Name from Below Line
            //                            //var queryParametersSubChild = new DynamicParameters();
            //                            //queryParametersSubChild.Add("@MenuItemId", SubModule.MenuId);

            //                            //var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //                            //IEnumerable<SubMenu> modelFeature = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //                            //foreach (SubMenu SubModulefeature in modelFeature)
            //                            //{
            //                            //    //Query if Record Exist in RoleMenuItemFeatureMapping Table then Mark Checked Else Checked = false
            //                            //    string tableNameFeature = "Setup_RoleMenuItemFeatureMapping";
            //                            //    string qryFeature = $"RoleId = @RoleId  AND  MenuItemFeatureId = @MenuItemFeatureId and IsActive = 1";
            //                            //    object paramFeature = new { RoleId = obj.RoleId, MenuItemId = SubModule.MenuId, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId };
            //                            //    //object paramSubModule = new { RoleId = roleId, MenuItemId = type.MenuId };
            //                            //    RoleMenuItemFeatureMapping modelFeatureChecked = dapperManager.FindByID<RoleMenuItemFeatureMapping>(qryFeature, paramFeature, tableNameFeature).FirstOrDefault();
            //                            //    if (modelFeatureChecked != null)
            //                            //    {
            //                            //        parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = true });
            //                            //    }
            //                            //    else
            //                            //    {
            //                            //        parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = false });
            //                            //    }

            //                            //}
            //                            nodes.Add(parent);

            //                        //}
            //                       // else
            ////{
            //                          //  parent.children.Add(new MenuFeatureMapping() { MenuItemId = SubModule.MenuId, ParentId = type.Parent_Id, Value = SubModule.MenuId + randomSubModule, Label = SubModule.Menu_Name, Checked = false });

            //                            ////Get Grand Child Node Name from Below Line
            //                           // var queryParametersSubChild = new DynamicParameters();
            //                           // queryParametersSubChild.Add("@MenuItemId", SubModule.MenuId);

            //                            //var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //                            //IEnumerable<MenuFeatureMapping> modelFeature = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //                            //foreach (MenuFeatureMapping SubModulefeature in modelFeature)
            //                            //{
            //                            //    parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.MenuItemFeatureId, MenuItemId = SubModule.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, MenuItemFeatureId = SubModulefeature.MenuItemFeatureId, Checked = false });
            //                            //    // parent.children[i].children.Add(new MenuFeatureMapping() { FeatureId = SubModulefeature.FeatureId, MenuItemId = type.MenuId, Value = randomSubModule + 1, Label = SubModulefeature.Feature, Checked = true });
            //                            //}

            //                            //nodes.Add(parent);
            //                       // }
            //                        //i++;
            //                    }

            //                }
            //                else
            //                {
            //                    //if (type.SubNode != "###" && type.SubNode != "#")
            //                    //{
            //                    //    if (type.MenuId == 2)
            //                    //    {

            //                    //    }
            //                    //    var queryParameters = new DynamicParameters();
            //                    //    queryParameters.Add("@RoleId", obj.RoleId);
            //                    //    queryParameters.Add("@MenuItemId", type.MenuId);

            //                    //    var spName = "usp_MenuItem_GetRoleMenuItemFeatureMappingExist";
            //                    //    RoleMenuItemFeatureMapping role = new RoleMenuItemFeatureMapping();
            //                    //    IEnumerable<RoleMenuItemFeatureMapping> modelParentNodeChecked = await dapperManager.QueryList(role, spName, queryParameters);
            //                    //    if (modelParentNodeChecked.Any())
            //                    //    {
            //                    //        parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, ApplicationId = type.ApplicationId, Value = type.MenuId.ToString(), parent = "#", Label = type.Menu_Name, Checked = true };
            //                    //        nodes.Add(parent);
            //                    //    }
            //                    //    else
            //                    //    {
            //                    //        parent = new MenuFeatureMapping() { MenuItemId = type.MenuId, ApplicationId = type.ApplicationId, Value = type.MenuId.ToString(), parent = "#", Label = type.Menu_Name, Checked = false };
            //                    //        nodes.Add(parent);

            //                    //    }


            //                    //}

            //                }
            //                // }
            //                //if (type.SubNode != "#" && type.SubNode != "###")

            //                //{
            //                //    //Get Child Node Feature Mapping
            //                //    var queryParametersSubChild = new DynamicParameters();
            //                //    queryParametersSubChild.Add("@MenuItemId", type.MenuId);

            //                //    var spNameSubChildNode = "usp_MenuItem_Get_RoleMenuItemSubChild ";
            //                //    IEnumerable<MenuFeatureMapping> modelSubChild = await dapperManager.QueryList(parent, spNameSubChildNode, queryParametersSubChild);
            //                //    string randomChild = GenerateRandomNo();
            //                //    foreach (MenuFeatureMapping Subfeature in modelSubChild)
            //                //    {
            //                //        string tableNameFeature = "Setup_RoleMenuItemFeatureMapping";
            //                //        string qryFeature = $"RoleId = @RoleId  AND MenuItemFeatureId = @MenuItemFeatureId and IsActive = 1 ";
            //                //        object paramFeature = new { RoleId = obj.RoleId, MenuItemId = type.MenuId, MenuItemFeatureId = Subfeature.MenuItemFeatureId };
            //                //        RoleMenuItemFeatureMapping modelFeature = dapperManager.FindByID<RoleMenuItemFeatureMapping>(qryFeature, paramFeature, tableNameFeature).FirstOrDefault();

            //                //        if (modelFeature != null)
            //                //        {
            //                //            parent.children.Add(new MenuFeatureMapping() { FeatureId = Subfeature.MenuItemFeatureId, MenuItemId = type.MenuId, Value = Subfeature.FeatureId + randomChild, Label = Subfeature.Feature, MenuItemFeatureId = Subfeature.MenuItemFeatureId, Checked = true });
            //                //        }
            //                //        else
            //                //        {
            //                //            parent.children.Add(new MenuFeatureMapping() { FeatureId = Subfeature.MenuItemFeatureId, MenuItemId = type.MenuId, Value = Subfeature.FeatureId + randomChild, Label = Subfeature.Feature, MenuItemFeatureId = Subfeature.MenuItemFeatureId, Checked = false });
            //                //        }

            //                //    }
            //                //}
            //            }

            //           // List<Menu> routes =  nodes;

            //            return nodes.Distinct().ToList();




        }

        public async Task<dynamic> LogOut(UserLogin user)
        {

            var queryParameters = new DynamicParameters();
            queryParameters.Add("@OperationId", user.OperationTypeId);
            queryParameters.Add("@UserId", user.UserId);
            queryParameters.Add("@Name", "");
            queryParameters.Add("@EmailAddress", "");
            queryParameters.Add("@Password", "");
            queryParameters.Add("@RoleId", "");
            queryParameters.Add("@CreatedBy", user.CreatedBy);
            queryParameters.Add("@UserIP", user.UserIP);
            var spName = "usp_UserLogin_Operation";
            return await dapperManager.QueryList<dynamic>(objdynamic, spName, queryParameters);
        }
    }
}
