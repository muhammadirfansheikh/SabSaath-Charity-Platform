
using SabSath.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SabSath.Data.DataRepository;
using System.IO;
using SabSath.Core.Utilities;
using SabSath.Core.Model;
using System.Data;

namespace SabSath.Application.Repositiories
{
    public interface IUserService
    {
        dynamic GetUser(UserLogin users);
        dynamic CrudUser(UserLogin users);
        dynamic VerifyLogin(UserLogin users);
        dynamic usp_User_Change_Password(UserLogin objUserLogin);


        dynamic GetRoleAndFeatures(int RoleId);
        dynamic ForgotPassword(UserLogin users);

        dynamic ForgotPasswordAutoGenerated(UserLogin users);

        //  dynamic RoleAgainst_Menues(UserRole obj);
        List<Menu> RoleAgainst_Menues(UserRole model);

        dynamic LogOut(UserLogin objUserLogin);


    }
    public class UserService : IUserService
    {
        //Dictionary<string, object> objResponse = new Dictionary<string, object>();
        MessageDate<dynamic> responseDetail = new MessageDate<dynamic>();
        private readonly IUserDataDapperRepository _userDataDapperRepository;

        public UserService(IUserDataDapperRepository userDataDapperRepository)
        {
            _userDataDapperRepository = userDataDapperRepository;

        }
        //public async Task<UserLogin> GetUserByLoginId(string loginId, string password)
        public dynamic GetUser(UserLogin users)
        {
            try
            {
                dynamic obj = _userDataDapperRepository.GetUser(users);
                if (obj != null && obj.Result.Count > 0)
                {
                    responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, ResponseMessages.Success, obj.Result);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.NoData);
                }

            }
            catch (Exception ex)
            {
                responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.ExceptionMessage);
            }

            return responseDetail;
        }

        public dynamic GetRoleAndFeatures(int RoleId)
        {
            try
            {

                DataSet obj_response = _userDataDapperRepository.GetRoleMenuesAndFeatures(RoleId);
                if (obj_response != null)
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(true, ResponseCodes.Success, ResponseMessages.Success, obj_response);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Failure, ResponseMessages.Failure);
                }
                return responseDetail;
            }
            catch (Exception e)
            {
                return responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Exception, ResponseMessages.Exception);
            }
        }

        public dynamic usp_User_Change_Password(UserLogin objUserLogin)
        {
            try
            {

                DataSet obj_response = _userDataDapperRepository.usp_User_Change_Passowrd(objUserLogin);
                if (obj_response != null)
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(true, ResponseCodes.Success, ResponseMessages.Success, obj_response);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Failure, ResponseMessages.Failure);
                }
                return responseDetail;
            }
            catch (Exception e)
            {
                return responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Exception, ResponseMessages.Exception);
            }
        }

        public dynamic VerifyLogin(UserLogin users)
        {
            try
            {

                DataSet obj_response = _userDataDapperRepository.VerifyLogin(users);
                if (obj_response != null)
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(true, ResponseCodes.Success, ResponseMessages.Success, obj_response);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Failure, ResponseMessages.Failure);
                }
                return responseDetail;
            }
            catch (Exception e)
            {
                return responseDetail = CommonObjects.GetRepsonsesWithDataSet(false, ResponseCodes.Exception, ResponseMessages.Exception);
            }
        }
        public dynamic CrudUser(UserLogin users)
        {
            try
            {
                dynamic obj = _userDataDapperRepository.CrudUser(users);
                if (obj != null)
                {
                    if (Convert.ToInt32(obj.Result.Count) > 0)
                    {
                        if (obj.Result[0].HasError == 0 || obj.Result[0].HasError == null)
                            responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, obj.Result[0].Message, obj.Result);
                        else
                            responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Failure, obj.Result[0].Message, null);
                    }
                    else
                    {
                        responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Failure, "Invalid User Name Or Password.", obj.Result);
                    }

                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.Failure);
                }
            }
            catch (Exception ex)
            {

                responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ex.InnerException.ToString(), ResponseMessages.Failure);
            }

            return responseDetail;
        }



        public dynamic ForgotPasswordAutoGenerated(UserLogin users)
        {
            try
            {
                dynamic obj = _userDataDapperRepository.ForgotPasswordAutoGenerated(users);
                if (obj != null && obj.Result.Count > 0)
                {
                    responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, ResponseMessages.Success, obj.Result);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.NoData);
                }

            }
            catch (Exception ex)
            {
                responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.ExceptionMessage);
            }

            return responseDetail;
        }

        public dynamic ForgotPassword(UserLogin users)
        {
            try
            {
                dynamic obj = _userDataDapperRepository.ForgotPassword(users);
                if (obj != null && obj.Result.Count > 0)
                {
                    responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, ResponseMessages.Success, obj.Result);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.NoData);
                }

            }
            catch (Exception ex)
            {
                responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.ExceptionMessage);
            }

            return responseDetail;
        }



        public List<Menu> RoleAgainst_Menues(UserRole obj)
        {
            dynamic obj_response = null;
            try
            {
                obj_response = _userDataDapperRepository.RoleAgainst_Menues(obj);
                //if (obj != null)
                //{
                //    responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, ResponseMessages.Success);
                //}
                //else
                //{
                //    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.NoData);
                //}
                //if (obj != null)
                // {
                //responseDetailM = CommonObjects.GetRepsonses_M(obj_response.Result);

                //}
                //else
                //{
                // responseDetail = CommonObjects.GetRepsonses_M(ResponseMessages.Failure);
                // }
                // return responseDetailM;

            }
            catch (Exception ex)
            {
                //  return responseDetail = CommonObjects.GetRepsonses_M(ResponseMessages.Exception);
            }
            return obj_response;
        }


        public dynamic LogOut(UserLogin objUserLogin)
        {
            try
            {
                dynamic obj = _userDataDapperRepository.LogOut(objUserLogin);
                if (obj != null && obj.Result.Count > 0)
                {
                    responseDetail = CommonObjects.GetRepsonses(true, ResponseCodes.Success, ResponseMessages.Success, obj.Result);
                }
                else
                {
                    responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.NoData);
                }

            }
            catch (Exception ex)
            {
                responseDetail = CommonObjects.GetRepsonses(false, ResponseCodes.Failure, ResponseMessages.ExceptionMessage);
            }

            return responseDetail;
        }

    }
}
